#!/usr/bin/perl
use warnings;
use strict;
use Getopt::Long;

# last modified 26 09 2017

my $seqwalker_version = "0.1.0";
my ($threshold,$verbose) = process_commandline();

warn "Last alignments will be carried out with an alignment score threshold of $threshold (for -d and -e)\n\n"; sleep(1);

my $initial_input_seq = shift @ARGV;
my $seqs_processed = 0;

my ($rest_file,$index_file);  

my $current_reference; # this will store the growing reference sequence

# Storing all read sequences in  data structure of fast access later on
my %seqs; # data structure holding all sequence IDs and sequences in the run
store_seqs($initial_input_seq);


warn "Initial round\n";
($rest_file,$index_file) = process_first_seq_file($initial_input_seq);
warn "New rest file:\t$rest_file\nNew index file:\t$index_file\n\n";

# INDEXING THE FIRST SEQUENCE 
index_seq($index_file);
align($rest_file);

my $best_hit_file = find_best_hit($rest_file);
($index_file,my $best_seqID) = do_something_with_best_alignment($best_hit_file);

($rest_file,my $eoo) = eliminate_best_hit_from_FastA($rest_file,$best_seqID);
if ($eoo){
    warn "Reached end of output. Terminating...\n\n";
    exit;
}
warn "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n";
    
# ready to loop now...
for (1..100){
    warn "Round #$_\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n";sleep(1);
    index_seq($index_file);
    align($rest_file); 
    $best_hit_file = find_best_hit($rest_file);     
    ($index_file,my $best_seqID) = do_something_with_best_alignment($best_hit_file);

    ($rest_file,my $eoo) = eliminate_best_hit_from_FastA($rest_file,$best_seqID);
    if ($eoo){
	warn "Reached end of output. Termining...\n\n";
	exit;
    }
    warn "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n";
}

sub eliminate_best_hit_from_FastA{
    
   
    my ($rest_file,$best_seqID) = @_;

    open (IN,$rest_file) or die "Failed to read from rest-sequence file >$rest_file<: $!\n\n";
    warn "Now eliminating current best sequence from the rest-sequence file >$rest_file< (best seqID: $best_seqID)\n\n";
    my $rest_written_out = 0;
    my $output_end = 0;

    my $rest_outfile = "rest_${seqs_processed}.fa";
    warn "Writing new REST outfile to >$rest_outfile<\n";
    open (REST,'>',$rest_outfile) or die "Failed to write to sequence file $rest_outfile\n";    
    
    my $id;
    my $seq;
    
    while (<IN>){
	chomp;
	# warn "$_\n";
	if ($_ =~ /^(>.*)/){
	    
	    unless($id){
		$_ =~ s/^\>//;
		$id = $_; # first ID
		$verbose and warn "Setting current seqID to $id\n";
		next;
	    }
	    
	    # deciding what to do with the old sequence
	    if ($id eq $best_seqID){
		$verbose and warn "Removing entry $id!\n";
		
		# setting new seq ID
		$seq = '';
		$id = $_;
		$id =~ s/^\>//;
		$verbose and warn "Setting current seqID to $id\n";	
	    }
	    else{
		# printing this entry to the new rest_file
		# warn "keeping this entry\n";	
		print REST ">$id\n$seq\n";
		$rest_written_out++;
		# setting new seq ID
		$seq = '';
		$id = $_;
		$id =~ s/^\>//;
	    }
	}
	else{
	    $seq .= $_;
	}
    }

    # printing last sequence
    if (defined $id){
	if ($id eq $best_seqID){
	    warn "The sequence that needs to be removed is the only one present!\n\n";   
	}
	else{
	    print REST ">$id\n$seq\n";
	    $rest_written_out++;
	}
    }
    
    if ($rest_written_out == 0){
	$output_end = 1;
    }
    
    close IN or die "Failed to close IN filehandle: $!\n";
    close REST or die "Failed to close REST filehandle: $!\n";
    
    return ($rest_outfile,$output_end);

}

# filter_alignment_score();
# convert_to_bam();

sub do_something_with_best_alignment{

    my $file = shift;

    warn "Now working with best alignment file >>>$file<<<\n\n";
    open (IN,$file) or die "Failed to read from Best alignment file >$file<: $!\n\n";

    my $score     = <IN>;
    my $ref_seq   = <IN>;
    my $query_seq = <IN>;
    chomp $score;
    chomp $ref_seq;
    chomp ($query_seq);

    # QUERY
    my (undef,$id,$start,$size,$strand,$src_size,$text) = (split (/\s+/,$query_seq));
    # REFERENCE
    my (undef,$ref_id,$ref_start,$ref_size,$ref_strand,$ref_src_size,$ref_text) = (split (/\s+/,$ref_seq));

    # The start coordinate is 0-based
    
    # print "QUERY:\n$query_seq\n";
    # print "REFERENCE:\n$ref_seq\n";
    
    print "REFERENCE:\n";
    print "ID:\t\t$ref_id\n";
    print "Start:\t\t$ref_start\n";
    print "Size:\t\t$ref_size\n";
    print "Strand:\t\t$ref_strand\n";
    print "Source size:\t$ref_src_size\n";
    # print "REF-SEQ:\t\t$ref_text\n\n";

    print "QUERY:\n";
    print "ID:\t\t$id\n";
    print "Start:\t\t$start\n";
    print "Size:\t\t$size\n";
    print "Strand:\t\t$strand\n";
    print "Source size:\t$src_size\n";
    # print "QUERY-SEQ:\t\t$text\n\n";
 
    my ($ref_sequence,$query_sequence) = retrieve_sequence_from_original_FastA($ref_id,$id);
    
    my $extension;
    my $ext_seq;

    warn "Full reference sequence so far:\n$ref_sequence\n(length ",length($ref_sequence)," bp)\n\n";
    warn "Full query sequence:\n$query_sequence\n(length ",length($query_sequence)," bp)\n\n";
    
    if ($strand eq '-'){
	warn "reverse alignment\n";
	$extension = $src_size - $size;
	warn "QUERY extends REFERENCE by $extension bp\n";
	
	$ext_seq = substr($query_sequence,0,$extension);
	warn "Extension is:\t'$ext_seq'\n";
	$ext_seq = rc($ext_seq);
	warn "Extension is:\t'$ext_seq'\n";
    }
    elsif($strand eq '+'){
	$extension = $src_size - $size;
	warn "QUERY extends REFERENCE by $extension bp\n";
	
	$ext_seq = substr($query_sequence,-$extension,$extension);
	warn "Extension is:\t'$ext_seq'\n";
    }
    else{
	die "Strand of the alignment was neither + nor -\n";
    }
    
    
    $current_reference .= $ext_seq;

    my $new_fasta_reference = 'new_reference.fa';
    warn "Writing new current_reference_sequence out to file $new_fasta_reference\n";
    
    open(NEW,'>',$new_fasta_reference) or die "Failed to write new reference to a file $new_fasta_reference: $!\n";    
    print NEW ">new_ref\n$current_reference\n";
    close NEW or die "Failed close filehandle NEW: $!\n";
    
    ++$seqs_processed;

    return ($new_fasta_reference,$id);
    
}


###############
### SUBROUTINES
###############


sub store_seqs{
    
    my $file = shift;
    warn "Now storing all sequences in the run\n";
    open (STORE,$file) or die "Failed to read from file $file: $!\n";

    my $id;
    my $seq;
    while (<STORE>){
	chomp;
	
	if ($_ =~ /^(>.*)/){

	    unless($id){
		$id = $_; # first ID
		$id =~ s/^\>//;
		next;
	    }
	    # storing old sequence
	    $seqs{$id} = $seq;

	    # setting new seq ID
	    $seq = '';
	    $id = $_;
	    $id =~ s/^\>//;
	}
	else{
	    $seq .= $_;
	}
	
    }

    # storing last sequence
    $seqs{$id} = $seq;
    
    warn "Finished storing sequences (",scalar keys %seqs," in total)\n\n##########\n";
}

sub rc{ # reverse complements a sequence
    my $seq = shift;
    $seq = reverse $seq;
    $seq =~ tr/CAGT/GTCA/;
    return $seq;
}

sub retrieve_sequence_from_original_FastA{

    foreach my $id (keys %seqs){
	# warn "'$id'\n"; sleep(1);
    }
    
    my ($ref_id,$query_id) = @_;
    $verbose and warn "REF-ID:\n'$ref_id'\nQUERY-ID:\n'$query_id'\n";

    my $ref_seq;
    my $query_seq;
 
    # if the ref ID does not exist we are simply going to use the sequence stored in $current_reference
    if (exists $seqs{$ref_id}){
	$ref_seq = $seqs{$ref_id};
    }
    else{
	warn "$ref_id did not exist, using the sequence stored in \$currrent_reference\n";
	$ref_seq = $current_reference;
    }
    
    die "$query_id did not exist \n" unless (exists $seqs{$query_id});
    
    $query_seq = $seqs{$query_id};
    
    # warn "Ref: $ref_seq\n";
    # warn "Query: $query_seq\n";
    # warn "Returning now\n\n";
    
    return ($ref_seq,$query_seq);

}

sub process_first_seq_file{

    my ($file) = shift;
    warn "Using file $file\n";
    warn "Seqs processed so far: $seqs_processed\n";
    open (IN,$file) or die "Failed to open FastA input: $!\n";

    my $index_outfile = 'one_seq_only.fa';
    # we are taking the input FastA sequence and use the first sequence as index
    open (INDEX,">",$index_outfile) or die "Failed to write out FastA sequence to >$index_outfile<: $!\n";
    
    my $rest_outfile = "rest_${seqs_processed}.fa";
    # all subsequent sequences are written back out into a new FastA sequence that is shortened by 1 sequence
    open (REST,">",$rest_outfile) or die "Failed to write out FastA sequence to >$rest_outfile<: $!\n";
    warn "Writing all other reads to >>>$rest_outfile<<<\n";
 
    my $header;
    my $seq; 
    
    $header = <IN>;
    chomp $header; 
    # warn "Setting header to $header\n";
    
    my $count_leftover = 0;
    while (<IN>){
	chomp;
	
	if ($_ =~ /^(>.*)/){
	    # found next sequence; printing everything else to REST
	    print REST "$_\n";
	    $count_leftover++;
	    while (<IN>){
		print REST;
		if ($_ =~ /^(>.*)/){
		    $count_leftover++;
		}
	    }
	}
	else{
	    $seq .= $_;
	}
    }
    warn "Sequences left over after using the first FastA entry: $count_leftover\n";

    # Printing to the INDEX file in FastA format
    print INDEX "$header\n$seq\n";
    $current_reference = $seq;
    # warn "New reference:\n$header\n$seq\n\n"; sleep(1);

    close INDEX or die "Failed to close INDEX filehandle: $!\n";
    close REST  or die "Failed to close REST filehandle: $!\n";
    
    # deleting the previous REST file
    if ($file =~ /^rest/){
	unlink $file or die "Couldn't delete $file\n";
	warn "Successfully deleted file $file\n";
    }

    return ($rest_outfile,$index_outfile);    
}


sub index_seq{

    my $file = shift;
    # created Last index
    warn "Now creating Last index for the sequence file >>>$file<<<\n";
    
    system ("lastdb mydb $file");
    warn "done\n\n";
    
}


sub align {
    
    my $file = shift;
    warn "Now aligning file >>>$file<<< with Last\n";
    
    $file =~ s/\.fa$//; 

    system ("lastal -T 1 -e$threshold -d$threshold -P32 -r5 -q20 -a4 -b3 mydb ${file}.fa > ${file}.maf");
    warn "Finished\n\n";

}





sub find_best_hit {
    
    # Last reports many alignments as a default and this subroutine finds the one 
    # with the highest alignment score. It makes no sense to use this when last-split has run.
    # Also, the maf(-like) format that last-split produces is diffferent.
    
    my $file = shift;
    $file =~ s/fa$/maf/;
    warn "Now reading the aligned MAF file >>>$file<<< produced by Last\n"; # sleep(1);
    
    open (my $in, $file) or die "Cannot read file: $!\n";

    my $outfile = "best_hit_$file";
    warn "Writing best alignment output to $outfile\n";
    open (my $out,'>',$outfile) or die "Cannot open out file $outfile: $!";
    
    my $current_score;
    my $highest_score;
    my $current_ref_line;
    my $current_query_line;
    my $highest_ref_line;
    my $highest_query_line;
    my $current_alignment;
    my $highest_alignment;
    
    while (<$in>) {
	
	chomp;
	if (/^a/) {
	    $current_alignment = $_;
	    
	    unless ($highest_score) {
		$highest_score = 1;
	    }
	    my ($score)  = (split /\s+/)[1];
	    $score =~/(\d+)/;
	    $current_score = $1;
	    # warn "current score is $current_score\n";
	    
	    $current_ref_line = <$in>;
	    $current_query_line = <$in>;
	    # warn "$current_ref_line\n";
	    # warn "$current_query_line\n";
	    
	    if ($current_score > $highest_score) {
		$highest_score = $current_score;
		
		$highest_alignment = $current_alignment;
		warn "highest score so far is $highest_score\n";
		$highest_ref_line = $current_ref_line;
		$highest_query_line = $current_query_line;
	    }	
	}
    }

    $verbose and warn "The highest score in $file is $highest_score\n
    $highest_alignment\n
    $highest_ref_line\n
    $highest_query_line\n\n"; # sleep(1);
    
    print $out "$highest_alignment\n$highest_ref_line$highest_query_line";
    close $out or die $!;
    return ($outfile);

}



sub filter_alignment_score {
# Although last-split and best_hit will find a unique alignment for each (part of the) query, sequences which are
# not actually present in the reference will be put in "the best wrong place". They usually have low alignments
# scores, so this subroutine can filter out alignments below a specified threshold.

	my @files = <*.maf>;

	my $threshold = 1300; # alignment score below which alignments will be excluded
	my $retained = 0;	  # number of alignments written to the filtered file
	my $kicked = 0;       # number of alignments not passing the score threshold


	
	foreach my $file(@files) {

		unless ($file =~ /_scorefiltered.maf/) {
			warn "\nFiltering $file\n";
			open (my $in, $file) or die "Cannot read file: $!";
			$file =~ s/\.maf//;
			my $outfile = $file."_scorefiltered.maf";
			open (my $out,'>',$outfile) or die "Cannot open out file $outfile: $!";
		
	
			while (<$in>) {
	
				chomp;
				if (/^#/) {
					# These lines contain general alignment info
					print $out "$_\n";
				}
	
				if (/^a\sscore/) {
					# This is the score line for each alignment
					my $score_line = $_;
					my ($score) = (split /\s+/)[1];
					$score =~/(\d+)/;
					$score = $1;
					#warn "$score_line\n";
					#warn "The score for this alignment is $score\n";
		
					if ($score > $threshold) {
			
						++ $retained;
						my $alignment = <$in>;
						chomp;
			
						my $line = <$in>;
						chomp;
						$alignment .= $line;
			
						until ($line =~ /^\n+/) {
							$line = <$in>;
							chomp;
							$alignment .= $line;
						}
						print $out "$alignment\n";
					}
				
				else {++$kicked};
				}
	
			}
			my $number_of_alignments = $retained + $kicked;
			warn "With a Last alignment score threshold of $threshold\n$retained of $number_of_alignments alignments were printed to filtered file\n$kicked of $number_of_alignments alignements were excluded\n\n\n";
	
		close $in or die $!;
		close $out or die $!;
		}
	}
}





sub convert_to_bam {

	my @files = <*_scorefiltered.maf>;
	
	foreach my $file (@files) {
		$file =~ s/\.maf//;
		warn "Now converting $file.maf to bam\n";
		system ("maf-convert sam $file.maf | samtools view -bS -t ../SAM_header.txt - > $file.bam");
		# maf-convert does not produce a SAM header that can be used to create a bam file.
		# The reference name and length can be specified in a tab delim file and accessed
		# with the -t option.
	
	
	}

}


sub process_commandline{

    my $help;
    my $threshold;
    my $version;
    my $verbose;

    my $command_line = GetOptions ('help'                => \$help,
                                   'threshold=i'         => \$threshold,
				   'version'             => \$version,
				   'verbose'             => \$verbose,
        );
    
    die "Please respecify command line options\n\n" unless ($command_line);

    if ($help){
        print_helpfile();
        exit;
    }
    
    if (defined $threshold){
	if ($threshold > 0 and $threshold <= 100000){
	    # fine
	}
	else{
	    die "The alignment score threshold needs to be between 1 and 100000. Make your pick and try again\n\n";
	}
    }
    else{
	$threshold = 10000;
    }
    
    if ($version){
        print << "VERSION";
	   
                        SeqWalker - trial

               	     Version: $seqwalker_version
      Copyright 2017 Felix Krueger, Babraham Bioinformatics
            https://github.com/FelixKrueger/CamHack2017


VERSION
          exit;
    }

    return ($threshold,$verbose);
}

sub print_helpfile{
    warn "Don't worry, help is coming soon....\n";
}
